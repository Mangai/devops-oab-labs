def releaseTag,commitId

pipeline {
  agent {
      label 'maven'
  }
  stages {
    stage('Prepare') {
      steps {
        sh "git checkout master"
        sh "git config --local user.email 'jenkins@cicd.com'"
        sh "git config --local user.name 'jenkins'"
        
        script {
           commitId = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
           releaseTag = readMavenPom().getVersion().replace("-SNAPSHOT", "")
        }
      }
    }
    stage('Release Code') {
      environment {
        SCM_GIT_URL = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
      }
      steps {
        withCredentials([usernamePassword(credentialsId: 'dev-gogs-credentials', usernameVariable: 'GOGS_USERNAME', passwordVariable: 'GOGS_PASSWORD')]) {
	      sh "mvn --batch-mode release:clean release:prepare release:perform -s .settings.xml"
        }
      }
    }
    stage('Release Image') {
      steps {
        script {
          openshift.withCluster() {
            echo "Releasing version ${releaseTag}-${commitId}"
            openshift.tag("catalog:latest", "${env.REGISTRY_PROJECT}/catalog:${releaseTag}-${commitId}")
            openshift.tag("web:latest", "${env.REGISTRY_PROJECT}/web:${releaseTag}-${commitId}")
          }
        }
      }
    }    
    stage('Clean-up STAGE') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              openshift.raw('all,cm,pvc --all')
            }
          }
        }
      }
    }    
    stage('Deploy STAGE') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = 'https://raw.githubusercontent.com/siamaksade/devops-oab-labs/master/openshift/coolstore-template.yaml'
              openshift.apply(
                openshift.process("-f", template, "-p", "IMAGE_VERSION=${releaseTag}", "-p", "IMAGE_NAMESPACE=${env.REGISTRY_PROJECT}")
              )
            }
          }
        }
      }
    }    
  }
}