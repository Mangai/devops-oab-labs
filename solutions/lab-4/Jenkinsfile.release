def releaseTag

pipeline {
  agent {
      label 'maven'
  }
  stages {
    stage('Prepare') {
      steps {
        sh "git checkout master"
        sh "git config --local user.email 'jenkins@cicd.com'"
        sh "git config --local user.name 'jenkins'"
        
        script {
           commitId = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
           releaseTag = readMavenPom().getVersion().replace("-SNAPSHOT", "") + '-' + commitId
        }
      }
    }
    stage('Release Code') {
      environment {
        SCM_GIT_URL = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
      }
      steps {
        withCredentials([usernamePassword(credentialsId: "${env.CICD_PROJECT}-gogs-credentials", usernameVariable: "GOGS_USERNAME", passwordVariable: "GOGS_PASSWORD")]) {
	      sh "mvn --batch-mode release:clean release:prepare release:perform -s .settings.xml"
        }
      }
    }
    stage('Release Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.CICD_PROJECT) {
              echo "Releasing version ${releaseTag}"
              openshift.tag("${env.CICD_PROJECT}/catalog:latest", "${env.CICD_PROJECT}/catalog:${releaseTag}")
              openshift.tag("${env.CICD_PROJECT}/web-ui:latest", "${env.CICD_PROJECT}/web-ui:${releaseTag}")
            }
          }
        }
      }
    }    
    stage('Tear-down STAGE') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              openshift.raw('delete all,cm,pvc --all')
            }
          }
        }
      }
    }    
    stage('Deploy STAGE') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = 'https://raw.githubusercontent.com/openshift-labs/devops-oab-labs/master/openshift/coolstore-template.yaml'
              openshift.apply(
                openshift.process("-f", template, "-p", "IMAGE_VERSION=${releaseTag}", "-p", "IMAGE_NAMESPACE=${env.CICD_PROJECT}")
              )
            }
          }
        }
      }
    }    
  }
}