def namespace, catalogReleaseTag, webReleaseTag, prodCluster, prodProject, prodToken

pipeline {
  agent {
      label 'skopeo'
  }
  stages {
    stage('Choose Release Version') {
      steps {
        script {
          openshift.withCluster() {
            namespace = openshift.project()
            prodCluster = env.PROD_MASTER.replace("https://","insecure://")
            withCredentials([usernamePassword(credentialsId: "${namespace}-prod-credentials", usernameVariable: "PROD_USER", passwordVariable: "PROD_TOKEN")]) {
              prodToken = env.PROD_TOKEN
            }

            def catalogTags = openshift.selector("istag").objects().collect { it.metadata.name }.findAll { it.startsWith 'catalog:' }.collect { it.replaceAll(/catalog:(.*)/, "\$1") }.sort()
            def webTags = openshift.selector("istag").objects().collect { it.metadata.name }.findAll { it.startsWith 'web-ui:' }.collect { it.replaceAll(/web-ui:(.*)/, "\$1") }.sort()
            timeout(5) {
              def inputs = input(
                ok: "Deploy",
                message: "Enter release version to promote to PROD",
                parameters: [
                  string(defaultValue: "prod", description: 'Name of the PROD project to create', name: 'PROD Project Name'),
                  choice(choices: catalogTags.join('\n'), description: '', name: 'Catalog Release Version'),
                  choice(choices: webTags.join('\n'), description: '', name: 'Web Release Version')
                ]
              )
              catalogReleaseTag = inputs['Catalog Release Version']
              webReleaseTag = inputs['Web Release Version']
              prodProject = inputs['PROD Project Name']
            }
          }
        }
      }
    }
    stage('Create PROD') {
      steps {
        script {
          openshift.withCluster(prodCluster, prodToken) {
            openshift.newProject(prodProject, "--display-name='CoolStore PROD'")
          }
        }
      }
    }    
    stage('Promote Images to PROD') {
      steps {
        script {
          openshift.withCluster() {
            def srcCatalogRef = openshift.selector("istag", "catalog:${catalogReleaseTag}").object().image.dockerImageReference
            def srcWebRef = openshift.selector("istag", "web-ui:${webReleaseTag}").object().image.dockerImageReference
            def destCatalogRef = "${env.PROD_REGISTRY}/${prodProject}/catalog:${catalogReleaseTag}"
            def destWebRef = "${env.PROD_REGISTRY}/${prodProject}/web-ui:${webReleaseTag}"
            def srcToken = readFile "/run/secrets/kubernetes.io/serviceaccount/token"
            sh "skopeo copy docker://${srcCatalogRef} docker://${destCatalogRef} --src-creds openshift:${srcToken} --dest-creds openshift:${prodToken} --src-tls-verify=false --dest-tls-verify=false"
            sh "skopeo copy docker://${srcWebRef} docker://${destWebRef} --dest-creds openshift:${prodToken} --dest-tls-verify=false"
          }
        }
      }
    }
    stage('Deploy to PROD') {
      steps {
        script {
          openshift.withCluster(prodCluster, prodToken) {
            openshift.withProject(prodProject) {
              def template = 'https://raw.githubusercontent.com/openshift-labs/devops-oab-labs/master/openshift/coolstore-apb-template.yaml'
              openshift.apply(
                openshift.process("-f", template, "-p", "CATALOG_IMAGE_VERSION=${catalogReleaseTag}", "-p", "WEB_IMAGE_VERSION=${webReleaseTag}", "-p", "IMAGE_NAMESPACE=", "-p", "DB_SERVICE_NAME=catalogpdb${UUID.randomUUID().toString().replaceAll('-','')}")
              )

              timeout(time: 30, unit: 'MINUTES') {
                def status = ""
                while (status != "ProvisionedSuccessfully1") {
                  status = openshift.selector("serviceinstance", "catalog-digitalocean-mysql-instance").object().status.conditions[0].reason
                  echo "Waiting for MySQL to be ready on Digital Ocean... [status=${status}]"
                  sleep 10
                }
              }

              openshift.selector("dc", "catalog").related("pods").delete()
            }
          }
        }
      }
    }
  }
}
